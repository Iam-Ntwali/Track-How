// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum AccountType {
  BANK
  MOBILE_MONEY
  CASH
  SAVINGS
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("verifiedAt")
  image         String?
  hashedPassword String?
  role          Role      @default(user)
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  budgets       Budget[]
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          AccountType
  balance       Float         @default(0)
  currency      String        @default("RWF")
  description   String?
  transactions  Transaction[]
  budgets       Budget[]      // Add this relation
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  type        TransactionType
  amount      Float
  description String?
  date        DateTime        @default(now())
  category    String
  subCategory String?
  wallet      Wallet         @relation(fields: [walletId], references: [id])
  walletId    String         @db.ObjectId
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String         @db.ObjectId
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}


model Budget {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  spent       Float     @default(0)
  startDate   DateTime
  endDate     DateTime
  category    String
  subCategory String?
  wallet      Wallet    @relation(fields: [walletId], references: [id])
  walletId    String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([startDate, endDate])
}




